import { EthereumBaseChain } from "./base";
import { EVMNetworkConfig } from "./utils/types";
export declare const defaultConfigMap: EthereumBaseChain["configMap"];
export declare const goerliConfigMap: EthereumBaseChain["configMap"];
export declare enum EthereumTestnet {
    Goerli = "goerli",
    GÃ¶rli = "goerli",
    Kovan = "kovan"
}
/**
 * The Ethereum RenJS implementation.
 */
export declare class Ethereum extends EthereumBaseChain {
    static chain: "Ethereum";
    static configMap: {
        mainnet?: EVMNetworkConfig | undefined;
        testnet?: EVMNetworkConfig | undefined;
        devnet?: EVMNetworkConfig | undefined;
    };
    static assets: {
        ETH: "ETH";
        DAI: "DAI";
        REN: "REN";
        USDC: "USDC";
        USDT: "USDT";
        EURT: "EURT";
        BUSD: "BUSD";
        MIM: "MIM";
        CRV: "CRV";
        LINK: "LINK";
        UNI: "UNI";
        SUSHI: "SUSHI";
        FTT: "FTT";
        ROOK: "ROOK";
        BADGER: "BADGER";
        KNC: "KNC";
        gETH: "gETH";
        REN_Goerli: "REN_Goerli";
        DAI_Goerli: "DAI_Goerli";
        USDC_Goerli: "USDC_Goerli";
        USDT_Goerli: "USDT_Goerli";
        ETH_Goerli: "gETH";
    };
    configMap: {
        mainnet?: EVMNetworkConfig | undefined;
        testnet?: EVMNetworkConfig | undefined;
        devnet?: EVMNetworkConfig | undefined;
    };
    assets: {
        ETH: "ETH";
        DAI: "DAI";
        REN: "REN";
        USDC: "USDC";
        USDT: "USDT";
        EURT: "EURT";
        BUSD: "BUSD";
        MIM: "MIM";
        CRV: "CRV";
        LINK: "LINK";
        UNI: "UNI";
        SUSHI: "SUSHI";
        FTT: "FTT";
        ROOK: "ROOK";
        BADGER: "BADGER";
        KNC: "KNC";
        gETH: "gETH";
        REN_Goerli: "REN_Goerli";
        DAI_Goerli: "DAI_Goerli";
        USDC_Goerli: "USDC_Goerli";
        USDT_Goerli: "USDT_Goerli";
        ETH_Goerli: "gETH";
    };
    /**
     * Create a new Ethereum instance.
     *
     * @param params Ethereum constructor parameters
     * @param params.network A RenVM network string or an EVM config object.
     * @param params.testnet Optionally specify a default Ethereum testnet.
     * @param params.provider A Web3 or Ethers.js provider.
     * @param params.signer A Web3 or Ethers.js signer.
     * @param params.config Pass optional configurations, e.g. a logger
     */
    constructor({ network, defaultTestnet, ...params }: ConstructorParameters<typeof EthereumBaseChain>[0] & {
        defaultTestnet: EthereumTestnet | `${EthereumTestnet}`;
    });
}
//# sourceMappingURL=ethereum.d.ts.map