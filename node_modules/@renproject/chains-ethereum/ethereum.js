"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ethereum = exports.EthereumTestnet = exports.goerliConfigMap = exports.defaultConfigMap = void 0;
const utils_1 = require("@renproject/utils");
const base_1 = require("./base");
const generic_1 = require("./utils/generic");
const ethereumMainnetConfig = {
    selector: "Ethereum",
    nativeAsset: { name: "Ether", symbol: "ETH", decimals: 18 },
    averageConfirmationTime: 15,
    config: {
        chainId: "0x1",
        chainName: "Ethereum Mainnet",
        nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
        rpcUrls: [
            "https://cloudflare-eth.com",
            "https://mainnet.infura.io/v3/${INFURA_API_KEY}",
            "wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}",
            "https://api.mycryptoapi.com/eth",
        ],
        blockExplorerUrls: ["https://etherscan.io"],
    },
    addresses: {
        GatewayRegistry: "0xf36666C230Fa12333579b9Bd6196CB634D6BC506",
        BasicBridge: "0x82DF02A52E2e76C0c233367f2fE6c9cfe51578c5",
    },
};
const kovanConfig = {
    selector: "Ethereum",
    isTestnet: true,
    nativeAsset: { name: "Kovan Ether", symbol: "ETH", decimals: 18 },
    averageConfirmationTime: 15,
    config: {
        chainId: "0x2a",
        chainName: "Kovan",
        nativeCurrency: {
            name: "Kovan Ether",
            symbol: "KOV",
            decimals: 18,
        },
        rpcUrls: [
            "https://kovan.poa.network",
            "http://kovan.poa.network:8545",
            "https://kovan.infura.io/v3/${INFURA_API_KEY}",
            "https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
            "wss://kovan.infura.io/ws/v3/${INFURA_API_KEY}",
            "wss://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
            "ws://kovan.poa.network:8546",
        ],
        blockExplorerUrls: ["https://kovan.ethplorer.io"],
    },
    addresses: {
        GatewayRegistry: "0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701",
        BasicBridge: "0xcb6bD6B6c7D7415C0157e393Bb2B6Def7555d518",
    },
};
const goerliConfig = {
    selector: "Goerli",
    nativeAsset: { name: "Görli Ether", symbol: "gETH", decimals: 18 },
    averageConfirmationTime: 15,
    config: {
        chainId: "0x5",
        chainName: "Görli",
        nativeCurrency: {
            name: "Görli Ether",
            symbol: "GOR",
            decimals: 18,
        },
        rpcUrls: [
            "https://rpc.goerli.mudit.blog/",
            "https://goerli.infura.io/v3/${INFURA_API_KEY}",
            "https://eth-goerli.alchemyapi.io/v2/${ALCHEMY_API_KEY}",
            "wss://goerli.infura.io/v3/${INFURA_API_KEY}",
            "wss://eth-goerli.alchemyapi.io/v2/${ALCHEMY_API_KEY}",
        ],
        blockExplorerUrls: ["https://goerli.etherscan.io"],
    },
    addresses: {
        GatewayRegistry: "0x5076a1F237531fa4dC8ad99bb68024aB6e1Ff701",
        BasicBridge: "0xcb6bD6B6c7D7415C0157e393Bb2B6Def7555d518",
    },
};
exports.defaultConfigMap = {
    [utils_1.RenNetwork.Mainnet]: ethereumMainnetConfig,
    [utils_1.RenNetwork.Testnet]: kovanConfig,
};
exports.goerliConfigMap = {
    [utils_1.RenNetwork.Mainnet]: ethereumMainnetConfig,
    [utils_1.RenNetwork.Testnet]: goerliConfig,
};
var EthereumTestnet;
(function (EthereumTestnet) {
    EthereumTestnet["Goerli"] = "goerli";
    EthereumTestnet["G\u00F6rli"] = "goerli";
    EthereumTestnet["Kovan"] = "kovan";
})(EthereumTestnet = exports.EthereumTestnet || (exports.EthereumTestnet = {}));
const defaultAssets = {
    ETH: "ETH",
    DAI: "DAI",
    REN: "REN",
    USDC: "USDC",
    USDT: "USDT",
    EURT: "EURT",
    BUSD: "BUSD",
    MIM: "MIM",
    CRV: "CRV",
    LINK: "LINK",
    UNI: "UNI",
    SUSHI: "SUSHI",
    FTT: "FTT",
    ROOK: "ROOK",
    BADGER: "BADGER",
    KNC: "KNC",
};
const goerliAssets = {
    ETH: "gETH",
    DAI: "DAI_Goerli",
    REN: "REN_Goerli",
    USDC: "USDC_Goerli",
    USDT: "USDT_Goerli",
    // Goerli only
    gETH: "gETH",
    REN_Goerli: "REN_Goerli",
    DAI_Goerli: "DAI_Goerli",
    USDC_Goerli: "USDC_Goerli",
    USDT_Goerli: "USDT_Goerli",
    ETH_Goerli: "gETH",
};
/**
 * The Ethereum RenJS implementation.
 */
class Ethereum extends base_1.EthereumBaseChain {
    /**
     * Create a new Ethereum instance.
     *
     * @param params Ethereum constructor parameters
     * @param params.network A RenVM network string or an EVM config object.
     * @param params.testnet Optionally specify a default Ethereum testnet.
     * @param params.provider A Web3 or Ethers.js provider.
     * @param params.signer A Web3 or Ethers.js signer.
     * @param params.config Pass optional configurations, e.g. a logger
     */
    constructor(_a) {
        var { network, defaultTestnet } = _a, params = __rest(_a, ["network", "defaultTestnet"]);
        super(Object.assign(Object.assign({}, params), { network: (0, generic_1.resolveEVMNetworkConfig)(defaultTestnet === EthereumTestnet.Görli
                ? exports.goerliConfigMap
                : exports.defaultConfigMap, network) }));
        this.configMap = Ethereum.configMap;
        this.assets = Ethereum.assets;
        this.configMap =
            defaultTestnet === EthereumTestnet.Görli
                ? exports.goerliConfigMap
                : exports.defaultConfigMap;
        this.assets = (defaultTestnet === EthereumTestnet.Görli &&
            network === utils_1.RenNetwork.Testnet
            ? goerliAssets
            : defaultAssets);
    }
}
exports.Ethereum = Ethereum;
// Static members.
Ethereum.chain = "Ethereum";
Ethereum.configMap = exports.defaultConfigMap;
Ethereum.assets = Object.assign(Object.assign({}, goerliAssets), defaultAssets);
//# sourceMappingURL=ethereum.js.map