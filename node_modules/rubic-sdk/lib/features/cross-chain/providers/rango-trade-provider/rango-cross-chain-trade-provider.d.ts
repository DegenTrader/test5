import { MetaResponse, RangoClient } from 'rango-sdk-basic/lib';
import { BlockchainName } from "../../../../core";
import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { FeeInfo } from "../common/models/fee";
import { CalculationResult } from "../common/models/calculation-result";
import { RequiredCrossChainOptions } from '../../models/cross-chain-options';
import { CrossChainTradeProvider } from '../common/cross-chain-trade-provider';
import { RangoCrossChainSupportedBlockchain } from './constants/rango-cross-chain-supported-blockchain';
export declare class RangoCrossChainTradeProvider extends CrossChainTradeProvider {
    readonly type: "RANGO";
    readonly rango: RangoClient;
    meta: MetaResponse | null;
    get walletAddress(): string;
    static isSupportedBlockchain(blockchain: BlockchainName): blockchain is RangoCrossChainSupportedBlockchain;
    isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    calculate(from: PriceTokenAmount, toToken: PriceTokenAmount, options: RequiredCrossChainOptions): Promise<CalculationResult>;
    private getRequestParams;
    private parseMinMaxAmountErrors;
    private parseTradeTypes;
    protected getFeeInfo(fromBlockchain: Partial<BlockchainName>, providerAddress: string): Promise<FeeInfo>;
}
