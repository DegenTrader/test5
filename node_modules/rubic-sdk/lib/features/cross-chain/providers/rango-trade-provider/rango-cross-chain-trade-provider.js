"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangoCrossChainTradeProvider = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var lib_1 = require("rango-sdk-basic/lib");
var core_1 = require("../../../../core");
var price_token_amount_1 = require("../../../../core/blockchain/tokens/price-token-amount");
var native_tokens_1 = require("../../../../core/blockchain/constants/native-tokens");
var injector_1 = require("../../../../core/sdk/injector");
var empty_address_1 = require("../../../../core/blockchain/constants/empty-address");
var cross_chain_min_amount_error_1 = require("../../../../common/errors/cross-chain/cross-chain-min-amount.error");
var cross_chain_max_amount_error_1 = require("../../../../common/errors/cross-chain/cross-chain-max-amount.error");
var rango_providers_1 = require("../../../instant-trades/dexes/common/rango/constants/rango-providers");
var unsupported_receiver_address_error_1 = require("../../../../common/errors/cross-chain/unsupported-receiver-address.error");
var get_from_without_fee_1 = require("../../utils/get-from-without-fee");
var cross_chain_trade_type_1 = require("../../models/cross-chain-trade-type");
var common_cross_chain_abi_1 = require("../common/constants/common-cross-chain-abi");
var cross_chain_trade_provider_1 = require("../common/cross-chain-trade-provider");
var contract_address_1 = require("./constants/contract-address");
var rango_api_key_1 = require("./constants/rango-api-key");
var rango_cross_chain_supported_blockchain_1 = require("./constants/rango-cross-chain-supported-blockchain");
var rango_cross_chain_trade_1 = require("./rango-cross-chain-trade");
var rango_providers_2 = require("./models/rango-providers");
var rango_blockchain_name_1 = require("./constants/rango-blockchain-name");
var RangoCrossChainTradeProvider = /** @class */ (function (_super) {
    __extends(RangoCrossChainTradeProvider, _super);
    function RangoCrossChainTradeProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.RANGO;
        _this.rango = new lib_1.RangoClient(rango_api_key_1.RANGO_API_KEY);
        _this.meta = null;
        return _this;
    }
    Object.defineProperty(RangoCrossChainTradeProvider.prototype, "walletAddress", {
        get: function () {
            return injector_1.Injector.web3Private.address;
        },
        enumerable: false,
        configurable: true
    });
    RangoCrossChainTradeProvider.isSupportedBlockchain = function (blockchain) {
        return rango_cross_chain_supported_blockchain_1.rangoCrossChainSupportedBlockchains.some(function (supportedBlockchain) { return supportedBlockchain === blockchain; });
    };
    RangoCrossChainTradeProvider.prototype.isSupportedBlockchains = function (fromBlockchain, toBlockchain) {
        return (RangoCrossChainTradeProvider.isSupportedBlockchain(fromBlockchain) &&
            RangoCrossChainTradeProvider.isSupportedBlockchain(toBlockchain));
    };
    RangoCrossChainTradeProvider.prototype.calculate = function (from, toToken, options) {
        return __awaiter(this, void 0, void 0, function () {
            var fromBlockchain, toBlockchain, price, amountUsdPrice, feeInfo, fromWithoutFee, request, _a, route, resultType, tx, networkFee, to, cryptoFeeToken, gasData, _b, _c, bridgeType, itType, rangoTrade, error_1, rubicSdkError;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (options.receiverAddress) {
                            throw new unsupported_receiver_address_error_1.UnsupportedReceiverAddressError();
                        }
                        fromBlockchain = from.blockchain;
                        toBlockchain = toToken.blockchain;
                        if (!this.isSupportedBlockchains(fromBlockchain, toBlockchain)) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.checkContractState(fromBlockchain, contract_address_1.RANGO_CONTRACT_ADDRESSES[fromBlockchain].rubicRouter)];
                    case 1:
                        _d.sent();
                        return [4 /*yield*/, from.getAndUpdateTokenPrice()];
                    case 2:
                        price = _d.sent();
                        amountUsdPrice = from.tokenAmount.multipliedBy(price);
                        if (price && amountUsdPrice.lt(101)) {
                            return [2 /*return*/, {
                                    trade: null,
                                    error: new cross_chain_min_amount_error_1.CrossChainMinAmountError(new bignumber_js_1.default(101).dividedBy(price), from.symbol)
                                }];
                        }
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 11, , 12]);
                        return [4 /*yield*/, this.getFeeInfo(fromBlockchain, options.providerAddress)];
                    case 4:
                        feeInfo = _d.sent();
                        fromWithoutFee = (0, get_from_without_fee_1.getFromWithoutFee)(from, feeInfo);
                        request = this.getRequestParams(fromWithoutFee, toToken, options);
                        return [4 /*yield*/, this.rango.swap(request)];
                    case 5:
                        _a = _d.sent(), route = _a.route, resultType = _a.resultType, tx = _a.tx;
                        networkFee = route === null || route === void 0 ? void 0 : route.fee.find(function (item) { return item.name === 'Network Fee'; });
                        if ((resultType === 'INPUT_LIMIT_ISSUE' || resultType === 'NO_ROUTE') && route) {
                            return [2 /*return*/, this.parseMinMaxAmountErrors(from, route)];
                        }
                        if (!(resultType === 'OK' && route)) return [3 /*break*/, 10];
                        to = new price_token_amount_1.PriceTokenAmount(__assign(__assign({}, toToken.asStruct), { tokenAmount: core_1.Web3Pure.fromWei(route.outputAmount, toToken.decimals) }));
                        return [4 /*yield*/, price_token_amount_1.PriceTokenAmount.createFromToken(__assign(__assign({}, core_1.BlockchainsInfo.getBlockchainByName(fromBlockchain).nativeCoin), { weiAmount: new bignumber_js_1.default(parseInt(tx.value || '0')).minus(from.isNative ? from.stringWeiAmount : 0) }))];
                    case 6:
                        cryptoFeeToken = _d.sent();
                        if (!(options.gasCalculation === 'enabled')) return [3 /*break*/, 8];
                        return [4 /*yield*/, rango_cross_chain_trade_1.RangoCrossChainTrade.getGasData(from, toToken)];
                    case 7:
                        _b = _d.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        _b = null;
                        _d.label = 9;
                    case 9:
                        gasData = _b;
                        _c = this.parseTradeTypes(route), bridgeType = _c.bridgeType, itType = _c.itType;
                        rangoTrade = new rango_cross_chain_trade_1.RangoCrossChainTrade({
                            from: from,
                            to: to,
                            toTokenAmountMin: core_1.Web3Pure.fromWei(route.outputAmount, toToken.decimals),
                            priceImpact: from.calculatePriceImpactPercent(toToken),
                            itType: itType,
                            bridgeType: bridgeType,
                            slippageTolerance: options.slippageTolerance,
                            feeInfo: __assign(__assign({}, feeInfo), { cryptoFee: {
                                    amount: core_1.Web3Pure.fromWei((networkFee === null || networkFee === void 0 ? void 0 : networkFee.amount) || 0, networkFee === null || networkFee === void 0 ? void 0 : networkFee.token.decimals),
                                    tokenSymbol: (networkFee === null || networkFee === void 0 ? void 0 : networkFee.token.symbol) ||
                                        native_tokens_1.nativeTokensList[fromBlockchain].symbol
                                } }),
                            cryptoFeeToken: cryptoFeeToken,
                            gasData: gasData
                        }, this.rango, options.providerAddress || empty_address_1.EMPTY_ADDRESS);
                        return [2 /*return*/, { trade: rangoTrade }];
                    case 10: return [2 /*return*/, null];
                    case 11:
                        error_1 = _d.sent();
                        rubicSdkError = cross_chain_trade_provider_1.CrossChainTradeProvider.parseError(error_1);
                        return [2 /*return*/, { trade: null, error: rubicSdkError }];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    RangoCrossChainTradeProvider.prototype.getRequestParams = function (fromToken, toToken, options) {
        var fromAddress = this.walletAddress || empty_address_1.EMPTY_ADDRESS;
        var toAddress = this.walletAddress || empty_address_1.EMPTY_ADDRESS;
        return {
            from: {
                blockchain: rango_blockchain_name_1.RANGO_BLOCKCHAIN_NAME[fromToken.blockchain],
                symbol: fromToken.symbol,
                address: fromToken.isNative ? null : fromToken.address
            },
            to: {
                blockchain: rango_blockchain_name_1.RANGO_BLOCKCHAIN_NAME[toToken.blockchain],
                symbol: toToken.symbol,
                address: toToken.isNative ? null : toToken.address
            },
            amount: fromToken.weiAmount.toFixed(0),
            disableEstimate: true,
            slippage: (options.slippageTolerance * 100).toString(),
            fromAddress: fromAddress,
            toAddress: toAddress,
            referrerAddress: null,
            referrerFee: null
        };
    };
    RangoCrossChainTradeProvider.prototype.parseMinMaxAmountErrors = function (fromToken, route) {
        var amountRestriction = route.amountRestriction;
        if ((amountRestriction === null || amountRestriction === void 0 ? void 0 : amountRestriction.min) && fromToken.weiAmount.lte(amountRestriction.min)) {
            return {
                trade: null,
                error: new cross_chain_min_amount_error_1.CrossChainMinAmountError(core_1.Web3Pure.fromWei(amountRestriction.min, fromToken.decimals), fromToken.symbol)
            };
        }
        if ((amountRestriction === null || amountRestriction === void 0 ? void 0 : amountRestriction.max) && fromToken.weiAmount.gte(amountRestriction.max)) {
            return {
                trade: null,
                error: new cross_chain_max_amount_error_1.CrossChainMaxAmountError(core_1.Web3Pure.fromWei(amountRestriction.max, fromToken.decimals), fromToken.symbol)
            };
        }
        return null;
    };
    RangoCrossChainTradeProvider.prototype.parseTradeTypes = function (route) {
        var _a, _b;
        var path = route.path, swapper = route.swapper;
        if (!path) {
            return {
                itType: { from: undefined, to: undefined },
                bridgeType: rango_providers_2.RANGO_TRADE_BRIDGE_TYPE[swapper.id]
            };
        }
        var swapperId = (_b = (_a = path.find(function (item) { return item.swapperType === 'BRIDGE' || item.swapperType === 'AGGREGATOR'; })) === null || _a === void 0 ? void 0 : _a.swapper) === null || _b === void 0 ? void 0 : _b.id;
        var dexes = path
            .filter(function (item) { return item.swapperType === 'DEX'; })
            .map(function (item) { return item.swapper.id; });
        var itType = {
            from: dexes[0] ? rango_providers_1.rangoProviders[dexes[0]] : undefined,
            to: dexes[1] ? rango_providers_1.rangoProviders[dexes[1]] : undefined
        };
        return { itType: itType, bridgeType: rango_providers_2.RANGO_TRADE_BRIDGE_TYPE[swapperId] };
    };
    RangoCrossChainTradeProvider.prototype.getFeeInfo = function (fromBlockchain, providerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = {};
                        _b = {};
                        return [4 /*yield*/, this.getFixedFee(fromBlockchain, providerAddress, contract_address_1.RANGO_CONTRACT_ADDRESSES[fromBlockchain]
                                .rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 1:
                        _a.fixedFee = (_b.amount = _d.sent(),
                            _b.tokenSymbol = native_tokens_1.nativeTokensList[fromBlockchain].symbol,
                            _b);
                        _c = {};
                        return [4 /*yield*/, this.getFeePercent(fromBlockchain, providerAddress, contract_address_1.RANGO_CONTRACT_ADDRESSES[fromBlockchain]
                                .rubicRouter, common_cross_chain_abi_1.commonCrossChainAbi)];
                    case 2: return [2 /*return*/, (_a.platformFee = (_c.percent = _d.sent(),
                            _c.tokenSymbol = 'USDC',
                            _c),
                            _a.cryptoFee = null,
                            _a)];
                }
            });
        });
    };
    return RangoCrossChainTradeProvider;
}(cross_chain_trade_provider_1.CrossChainTradeProvider));
exports.RangoCrossChainTradeProvider = RangoCrossChainTradeProvider;
//# sourceMappingURL=rango-cross-chain-trade-provider.js.map