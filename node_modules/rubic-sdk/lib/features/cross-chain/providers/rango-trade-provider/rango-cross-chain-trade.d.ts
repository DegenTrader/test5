import BigNumber from 'bignumber.js';
import { PriceTokenAmount, Web3Public } from "../../../../core";
import { BridgeType, SwapTransactionOptions, TradeType } from "../../..";
import { ContractParams } from "../../models/contract-params";
import { FeeInfo } from "../common/models/fee";
import { GasData } from "../../models/gas-data";
import { RangoClient } from 'rango-sdk-basic/lib';
import { CrossChainTrade } from "../common/cross-chain-trade";
import { RangoCrossChainSupportedBlockchain } from './constants/rango-cross-chain-supported-blockchain';
export declare class RangoCrossChainTrade extends CrossChainTrade {
    /** @internal */
    static getGasData(from: PriceTokenAmount, to: PriceTokenAmount): Promise<GasData | null>;
    readonly feeInfo: FeeInfo;
    readonly fromWeb3Public: Web3Public;
    readonly type: "RANGO";
    readonly from: PriceTokenAmount;
    readonly to: PriceTokenAmount;
    readonly slippageTolerance: number;
    readonly gasData: GasData;
    readonly priceImpact: number | null;
    readonly toTokenAmountMin: BigNumber;
    readonly itType: {
        from: TradeType | undefined;
        to: TradeType | undefined;
    };
    readonly rangoClientRef: RangoClient;
    readonly bridgeType: BridgeType | undefined;
    requestId: string | undefined;
    readonly cryptoFeeToken: PriceTokenAmount;
    get fromBlockchain(): RangoCrossChainSupportedBlockchain;
    protected get fromContractAddress(): string;
    constructor(crossChainTrade: {
        from: PriceTokenAmount;
        to: PriceTokenAmount;
        toTokenAmountMin: BigNumber;
        slippageTolerance: number;
        feeInfo: FeeInfo;
        itType: {
            from: TradeType | undefined;
            to: TradeType | undefined;
        };
        bridgeType: BridgeType | undefined;
        priceImpact: number | null;
        cryptoFeeToken: PriceTokenAmount;
        gasData: GasData;
    }, rangoClientRef: RangoClient, providerAddress: string);
    swap(options?: SwapTransactionOptions): Promise<string>;
    getContractParams(): Promise<ContractParams>;
    private refetchTxData;
    private checkProviderIsWhitelisted;
    getTradeAmountRatio(fromUsd: BigNumber): BigNumber;
}
