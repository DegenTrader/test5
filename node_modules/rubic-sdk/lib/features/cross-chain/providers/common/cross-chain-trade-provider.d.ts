import { CrossChainTradeType } from "../../..";
import { RequiredCrossChainOptions } from "../../models/cross-chain-options";
import { PriceTokenAmount } from "../../../../core/blockchain/tokens/price-token-amount";
import { PriceToken } from "../../../../core/blockchain/tokens/price-token";
import { RubicSdkError } from "../../../../common";
import { BlockchainName } from "../../../../core";
import { FeeInfo } from "./models/fee";
import { AbiItem } from 'web3-utils';
import BigNumber from 'bignumber.js';
import { CalculationResult } from "./models/calculation-result";
export declare abstract class CrossChainTradeProvider {
    static parseError(err: unknown): RubicSdkError;
    abstract readonly type: CrossChainTradeType;
    protected get walletAddress(): string;
    /**
     * Gets fee information.
     * @param _fromBlockchain Source network blockchain.
     * @param _providerAddress Integrator address.
     * @param _percentFeeToken Protocol fee token.
     * @protected
     * @internal
     */
    protected getFeeInfo(_fromBlockchain: Partial<BlockchainName>, _providerAddress: string, _percentFeeToken: PriceToken): Promise<FeeInfo>;
    /**
     * Gets fixed fee information.
     * @param fromBlockchain Source network blockchain.
     * @param providerAddress Integrator address.
     * @param contractAddress Contract address.
     * @param contractAbi Contract ABI.
     * @protected
     * @internal
     */
    protected getFixedFee(fromBlockchain: BlockchainName, providerAddress: string, contractAddress: string, contractAbi: AbiItem[]): Promise<BigNumber>;
    /**
     * Gets percent fee.
     * @param fromBlockchain Source network blockchain.
     * @param providerAddress Integrator address.
     * @param contractAddress Contract address.
     * @param contractAbi Contract ABI.
     * @protected
     * @internal
     */
    protected getFeePercent(fromBlockchain: BlockchainName, providerAddress: string, contractAddress: string, contractAbi: AbiItem[]): Promise<number>;
    protected checkContractState(fromBlockchain: BlockchainName, rubicRouter: string): Promise<void>;
    abstract isSupportedBlockchains(fromBlockchain: BlockchainName, toBlockchain: BlockchainName): boolean;
    abstract calculate(from: PriceTokenAmount, to: PriceToken, options: RequiredCrossChainOptions): Promise<CalculationResult>;
}
