"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossChainStatusManager = void 0;
var core_1 = require("../../core");
var injector_1 = require("../../core/sdk/injector");
var lib_1 = require("rango-sdk-basic/lib");
var router_sdk_1 = require("@viaprotocol/router-sdk");
var via_default_api_key_1 = require("./providers/via-trade-provider/constants/via-default-api-key");
var via_swap_status_1 = require("./providers/via-trade-provider/models/via-swap-status");
var cross_chain_trade_type_1 = require("./models/cross-chain-trade-type");
var celer_swap_status_enum_1 = require("./providers/common/celer-rubic/models/celer-swap-status.enum");
var cross_chain_tx_status_1 = require("./models/cross-chain-tx-status");
var lifi_swap_status_1 = require("./providers/lifi-trade-provider/models/lifi-swap-status");
var symbiosis_swap_status_1 = require("./providers/symbiosis-trade-provider/models/symbiosis-swap-status");
var rango_api_key_1 = require("./providers/rango-trade-provider/constants/rango-api-key");
/**
 * Contains methods for getting cross-chain trade statuses.
 */
var CrossChainStatusManager = /** @class */ (function () {
    function CrossChainStatusManager() {
        var _a;
        this.httpClient = injector_1.Injector.httpClient;
        this.getDstTxStatusFnMap = (_a = {},
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.CELER] = this.getCelerDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.RUBIC] = this.getRubicDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.LIFI] = this.getLifiDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.SYMBIOSIS] = this.getSymbiosisDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.DEBRIDGE] = this.getDebridgeDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.VIA] = this.getViaDstSwapStatus,
            _a[cross_chain_trade_type_1.CROSS_CHAIN_TRADE_TYPE.RANGO] = this.getRangoDstSwapStatus,
            _a);
    }
    /**
     * Returns cross-chain trade statuses on the source and target network.
     * The result consists of the status of the source and target transactions and destination tx hash.
     * @example
     * ```ts
     * const tradeData = {
     *   fromBlockchain: BLOCKCHAIN_NAME.FANTOM,
     *   toBlockchain: BLOCKCHAIN_NAME.BSC,
     *   txTimestamp: 1658241570024,
     *   srxTxHash: '0xd2263ca82ac0fce606cb75df27d7f0dc94909d41a58c37563bd6772496cb8924'
     * };
     * const provider = CROSS_CHAIN_TRADE_TYPE.VIA;
     * const crossChainStatus = await sdk.crossChainStatusManager.getCrossChainStatus(tradeData, provider);
     * console.log('Source transaction status', crossChainStatus.srcTxStatus);
     * console.log('Destination transaction status', crossChainStatus.dstTxStatus);
     * console.log('Destination transaction hash', crossChainStatus.dstTxHash);
     * ```
     * @param data Data needed to calculate statuses.
     * @param provider Cross-chain trade type.
     * @returns Object with transaction statuses and hash.
     */
    CrossChainStatusManager.prototype.getCrossChainStatus = function (data, provider) {
        return __awaiter(this, void 0, void 0, function () {
            var crossChainStatus, fromBlockchain, srcTxHash, srcTxReceipt, srcTxStatus, dstTxData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        crossChainStatus = {
                            srcTxStatus: cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN,
                            dstTxStatus: cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN,
                            dstTxHash: null
                        };
                        fromBlockchain = data.fromBlockchain, srcTxHash = data.srcTxHash;
                        return [4 /*yield*/, this.getTxReceipt(fromBlockchain, srcTxHash)];
                    case 1:
                        srcTxReceipt = _a.sent();
                        srcTxStatus = this.getSrcTxStatus(srcTxReceipt);
                        crossChainStatus.srcTxStatus = srcTxStatus;
                        return [4 /*yield*/, this.getDstTxStatus(srcTxStatus, srcTxReceipt, data, provider)];
                    case 2:
                        dstTxData = _a.sent();
                        crossChainStatus.dstTxHash = dstTxData.txHash;
                        if (dstTxData.txStatus === cross_chain_tx_status_1.CrossChainTxStatus.FAIL &&
                            srcTxStatus === cross_chain_tx_status_1.CrossChainTxStatus.PENDING) {
                            crossChainStatus.srcTxStatus = cross_chain_tx_status_1.CrossChainTxStatus.FAIL;
                        }
                        crossChainStatus.dstTxStatus = dstTxData.txStatus;
                        return [2 /*return*/, crossChainStatus];
                }
            });
        });
    };
    /**
     * Get cross-chain trade's source transaction status via receipt.
     * @param srcTxReceipt Transaction receipt.
     * @returns Cross-chain transaction status.
     */
    CrossChainStatusManager.prototype.getSrcTxStatus = function (srcTxReceipt) {
        if (srcTxReceipt === null) {
            return cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
        }
        if (srcTxReceipt.status) {
            return cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
        }
        return cross_chain_tx_status_1.CrossChainTxStatus.FAIL;
    };
    /**
     * Get destination transaction status and hash based on source transaction status,
     * source transaction receipt, trade data and provider type.
     * @param srcTxStatus Source transaction status.
     * @param srcTxReceipt Source transaction receipt.
     * @param tradeData Trade data.
     * @param provider Cross-chain trade type.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getDstTxStatus = function (srcTxStatus, srcTxReceipt, tradeData, provider) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (srcTxStatus === cross_chain_tx_status_1.CrossChainTxStatus.FAIL) {
                            return [2 /*return*/, { txHash: null, txStatus: cross_chain_tx_status_1.CrossChainTxStatus.FAIL }];
                        }
                        if (srcTxStatus === cross_chain_tx_status_1.CrossChainTxStatus.PENDING) {
                            return [2 /*return*/, { txHash: null, txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING }];
                        }
                        return [4 /*yield*/, this.getDstTxStatusFnMap[provider].call(this, tradeData, srcTxReceipt)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get Rango trade dst transaction status and hash.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getRangoDstSwapStatus = function (data, srcTxReceipt) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var requestId, rangoTradeStatusResponse, dstTxData, type, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 2, , 3]);
                        requestId = data.rangoRequestId;
                        return [4 /*yield*/, injector_1.Injector.httpClient.get('https://api.rango.exchange/basic/status', {
                                params: {
                                    apiKey: rango_api_key_1.RANGO_API_KEY,
                                    requestId: requestId,
                                    txId: srcTxReceipt.transactionHash
                                }
                            })];
                    case 1:
                        rangoTradeStatusResponse = _d.sent();
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN,
                            txHash: ((_a = rangoTradeStatusResponse.bridgeData) === null || _a === void 0 ? void 0 : _a.destTxHash) || null
                        };
                        if (rangoTradeStatusResponse.status === lib_1.TransactionStatus.SUCCESS) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        if (rangoTradeStatusResponse.status === lib_1.TransactionStatus.FAILED) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FAIL;
                            type = (_b = rangoTradeStatusResponse === null || rangoTradeStatusResponse === void 0 ? void 0 : rangoTradeStatusResponse.output) === null || _b === void 0 ? void 0 : _b.type;
                            if (type === 'MIDDLE_ASSET_IN_SRC' || type === 'MIDDLE_ASSET_IN_DEST') {
                                dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FALLBACK;
                            }
                            if (type === 'REVERTED_TO_INPUT') {
                                dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.REVERT;
                            }
                        }
                        if (rangoTradeStatusResponse.status === lib_1.TransactionStatus.RUNNING ||
                            rangoTradeStatusResponse.status === null) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
                        }
                        return [2 /*return*/, dstTxData];
                    case 2:
                        _c = _d.sent();
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Symbiosis trade dst transaction status and hash.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getSymbiosisDstSwapStatus = function (data, srcTxReceipt) {
        return __awaiter(this, void 0, void 0, function () {
            var symbiosisTxIndexingTimeSpent, srcChainId, _a, dstTxStatus, dstHash, dstTxData, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        symbiosisTxIndexingTimeSpent = Date.now() > data.txTimestamp + 30000;
                        if (!symbiosisTxIndexingTimeSpent) return [3 /*break*/, 7];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        srcChainId = core_1.BlockchainsInfo.getBlockchainByName(data.fromBlockchain).id;
                        return [4 /*yield*/, injector_1.Injector.httpClient.get("https://api.symbiosis.finance/crosschain/v1/tx/".concat(srcChainId, "/").concat(srcTxReceipt.transactionHash))];
                    case 2:
                        _a = _b.sent(), dstTxStatus = _a.status.text, dstHash = _a.tx.hash;
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                            txHash: dstHash || null
                        };
                        if (dstTxStatus === symbiosis_swap_status_1.SymbiosisSwapStatus.PENDING ||
                            dstTxStatus === symbiosis_swap_status_1.SymbiosisSwapStatus.NOT_FOUND) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
                        }
                        if (dstTxStatus === symbiosis_swap_status_1.SymbiosisSwapStatus.STUCKED) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.REVERT;
                        }
                        if (dstTxStatus === symbiosis_swap_status_1.SymbiosisSwapStatus.REVERTED) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FALLBACK;
                        }
                        if (!(dstTxStatus === symbiosis_swap_status_1.SymbiosisSwapStatus.SUCCESS)) return [3 /*break*/, 5];
                        if (!(data.toBlockchain !== core_1.BLOCKCHAIN_NAME.BITCOIN)) return [3 /*break*/, 3];
                        dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getBitcoinStatus(dstHash)];
                    case 4:
                        dstTxData = _b.sent();
                        _b.label = 5;
                    case 5: return [2 /*return*/, dstTxData];
                    case 6:
                        error_1 = _b.sent();
                        console.debug('[Symbiosis Trade] Error retrieving dst tx status', error_1);
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 7: return [2 /*return*/, {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                            txHash: null
                        }];
                }
            });
        });
    };
    /**
     * Get Li-fi trade dst transaction status and hash.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getLifiDstSwapStatus = function (data, srcTxReceipt) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, status, receiving, dstTxData, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!data.lifiBridgeType) {
                            return [2 /*return*/, {
                                    txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                    txHash: null
                                }];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        params = {
                            bridge: data.lifiBridgeType,
                            fromChain: core_1.BlockchainsInfo.getBlockchainByName(data.fromBlockchain).id,
                            toChain: core_1.BlockchainsInfo.getBlockchainByName(data.toBlockchain).id,
                            txHash: srcTxReceipt.transactionHash
                        };
                        return [4 /*yield*/, injector_1.Injector.httpClient.get('https://li.quest/v1/status', { params: params })];
                    case 2:
                        _a = _b.sent(), status = _a.status, receiving = _a.receiving;
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN,
                            txHash: (receiving === null || receiving === void 0 ? void 0 : receiving.txHash) || null
                        };
                        if (status === lifi_swap_status_1.LifiSwapStatus.DONE) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        if (status === lifi_swap_status_1.LifiSwapStatus.FAILED) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FAIL;
                        }
                        if (status === lifi_swap_status_1.LifiSwapStatus.INVALID) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN;
                        }
                        if (status === lifi_swap_status_1.LifiSwapStatus.NOT_FOUND || status === lifi_swap_status_1.LifiSwapStatus.PENDING) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
                        }
                        return [2 /*return*/, dstTxData];
                    case 3:
                        error_2 = _b.sent();
                        console.debug('[Li-fi Trade] error retrieving tx status', error_2);
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Celer trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    CrossChainStatusManager.prototype.getCelerDstSwapStatus = function (data, _srcTxReceipt) {
        return __awaiter(this, void 0, void 0, function () {
            var dstTxData, txSearchResult, trade, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                            txHash: null
                        };
                        return [4 /*yield*/, injector_1.Injector.httpClient.get('https://api.celerscan.com/scan/searchByTxHash', {
                                params: {
                                    tx: data.srcTxHash
                                }
                            })];
                    case 1:
                        txSearchResult = _a.sent();
                        if (txSearchResult.txSearchInfo.length === 0) {
                            return [2 /*return*/, dstTxData];
                        }
                        trade = txSearchResult.txSearchInfo[0].transfer[0];
                        if ([
                            celer_swap_status_enum_1.CelerTransferStatus.XS_UNKNOWN,
                            celer_swap_status_enum_1.CelerTransferStatus.XS_WAITING_FOR_SGN_CONFIRMATION,
                            celer_swap_status_enum_1.CelerTransferStatus.XS_WAITING_FOR_FUND_RELEASE
                        ].includes(trade.xfer_status)) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
                        }
                        if (trade.xfer_status === celer_swap_status_enum_1.CelerTransferStatus.XS_COMPLETED) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        if ([
                            celer_swap_status_enum_1.CelerTransferStatus.XS_REFUNDED,
                            celer_swap_status_enum_1.CelerTransferStatus.XS_TO_BE_REFUND,
                            celer_swap_status_enum_1.CelerTransferStatus.XS_REFUND_TO_BE_CONFIRMED
                        ].includes(trade.xfer_status)) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FALLBACK;
                        }
                        return [2 /*return*/, dstTxData];
                    case 2:
                        error_3 = _a.sent();
                        console.debug('[Celer Trade] error retrieving tx status', error_3);
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // @TODO remove after removing rubic cross-chain provider
    /**
     * Get Rubic trade dst transaction status.
     * @param data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status.
     */
    CrossChainStatusManager.prototype.getRubicDstSwapStatus = function (_data, _srcTxReceipt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { txStatus: cross_chain_tx_status_1.CrossChainTxStatus.UNKNOWN, txHash: null }];
            });
        });
    };
    /**
     * Get transaction receipt.
     * @param blockchain Blockchain name.
     * @param txHash Transaction hash.
     * @returns Transaction receipt.
     */
    CrossChainStatusManager.prototype.getTxReceipt = function (blockchain, txHash) {
        return __awaiter(this, void 0, void 0, function () {
            var receipt, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, injector_1.Injector.web3PublicService
                                .getWeb3Public(blockchain)
                                .getTransactionReceipt(txHash)];
                    case 1:
                        receipt = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_4 = _a.sent();
                        console.debug('Error retrieving src tx receipt', { error: error_4, txHash: txHash });
                        receipt = null;
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, receipt];
                }
            });
        });
    };
    /**
     * Get DeBridge trade dst transaction status and hash.
     * @param _data Trade data.
     * @param srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getDebridgeDstSwapStatus = function (_data, srcTxReceipt) {
        return __awaiter(this, void 0, void 0, function () {
            var params, _a, _b, send, _c, claim, dstTxData, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 2, , 3]);
                        params = { filter: srcTxReceipt.transactionHash, filterType: 1 };
                        return [4 /*yield*/, this.httpClient.get('https://api.debridge.finance/api/Transactions/GetFullSubmissionInfo', { params: params })];
                    case 1:
                        _a = _e.sent(), _b = _a.send, send = _b === void 0 ? null : _b, _c = _a.claim, claim = _c === void 0 ? null : _c;
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.FAIL,
                            txHash: (claim === null || claim === void 0 ? void 0 : claim.transactionHash) || null
                        };
                        if (!send || !claim) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.PENDING;
                        }
                        if (claim === null || claim === void 0 ? void 0 : claim.transactionHash) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        return [2 /*return*/, dstTxData];
                    case 2:
                        _d = _e.sent();
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Via trade dst transaction status and hash.
     * @param data Trade data.
     * @param _srcTxReceipt Source transaction receipt.
     * @returns Cross-chain transaction status and hash.
     */
    CrossChainStatusManager.prototype.getViaDstSwapStatus = function (data, _srcTxReceipt) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var txStatusResponse, status, dstTxData, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, new router_sdk_1.Via(via_default_api_key_1.VIA_DEFAULT_CONFIG).checkTx({
                                actionUuid: data.viaUuid
                            })];
                    case 1:
                        txStatusResponse = _c.sent();
                        status = txStatusResponse.event;
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                            txHash: ((_a = txStatusResponse.data) === null || _a === void 0 ? void 0 : _a.txHash) || null
                        };
                        if (status === via_swap_status_1.ViaSwapStatus.SUCCESS) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        if (status === via_swap_status_1.ViaSwapStatus.FAIL) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.FAIL;
                        }
                        return [2 /*return*/, dstTxData];
                    case 2:
                        _b = _c.sent();
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @internal
     * Get transaction status in bitcoin network;
     * @param hash Bitcoin transaction hash.
     */
    CrossChainStatusManager.prototype.getBitcoinStatus = function (hash) {
        return __awaiter(this, void 0, void 0, function () {
            var bitcoinTransactionStatus, dstTxData, btcStatusApi, _a, isCompleted;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dstTxData = {
                            txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                            txHash: null
                        };
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        btcStatusApi = 'https://blockchain.info/rawtx/';
                        return [4 /*yield*/, this.httpClient.get("".concat(btcStatusApi).concat(hash))];
                    case 2:
                        bitcoinTransactionStatus = _b.sent();
                        dstTxData.txHash = (bitcoinTransactionStatus === null || bitcoinTransactionStatus === void 0 ? void 0 : bitcoinTransactionStatus.hash) || null;
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, {
                                txStatus: cross_chain_tx_status_1.CrossChainTxStatus.PENDING,
                                txHash: null
                            }];
                    case 4:
                        isCompleted = (bitcoinTransactionStatus === null || bitcoinTransactionStatus === void 0 ? void 0 : bitcoinTransactionStatus.block_index) !== undefined;
                        if (isCompleted) {
                            dstTxData.txStatus = cross_chain_tx_status_1.CrossChainTxStatus.SUCCESS;
                        }
                        return [2 /*return*/, dstTxData];
                }
            });
        });
    };
    return CrossChainStatusManager;
}());
exports.CrossChainStatusManager = CrossChainStatusManager;
//# sourceMappingURL=cross-chain-status-manager.js.map