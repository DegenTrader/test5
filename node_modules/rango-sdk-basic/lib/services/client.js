"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangoClient = void 0;
var uuid_1 = require("uuid");
var httpService_1 = require("./httpService");
var types_1 = require("../types");
var RangoClient = /** @class */ (function () {
    function RangoClient(apiKey) {
        this.apiKey = apiKey;
        try {
            if (typeof window !== 'undefined') {
                var deviceId = localStorage.getItem('deviceId');
                if (deviceId) {
                    this.deviceId = deviceId;
                }
                else {
                    var generatedId = (0, uuid_1.v4)();
                    localStorage.setItem('deviceId', generatedId);
                    this.deviceId = generatedId;
                }
            }
            else {
                this.deviceId = (0, uuid_1.v4)();
            }
        }
        catch (e) {
            this.deviceId = (0, uuid_1.v4)();
        }
    }
    RangoClient.prototype.meta = function () {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, httpService_1.httpService.get("/basic/meta?apiKey=".concat(this.apiKey))];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    RangoClient.prototype.quote = function (quoteRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var body, axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = __assign(__assign({}, quoteRequest), { from: (0, types_1.assetToString)(quoteRequest.from), to: (0, types_1.assetToString)(quoteRequest.to), swappers: !!quoteRequest.swappers && quoteRequest.swappers.length > 0
                                ? quoteRequest.swappers.join(',')
                                : undefined, messagingProtocols: !!quoteRequest.messagingProtocols &&
                                quoteRequest.messagingProtocols.length > 0
                                ? quoteRequest.messagingProtocols.join(',')
                                : undefined });
                        return [4 /*yield*/, httpService_1.httpService.get("/basic/quote?apiKey=".concat(this.apiKey), {
                                params: body,
                                headers: { 'X-Rango-Id': this.deviceId },
                            })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    RangoClient.prototype.isApproved = function (requestId, txId) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, httpService_1.httpService.get("/basic/is-approved?apiKey=".concat(this.apiKey), {
                            params: { requestId: requestId, txId: txId },
                            headers: { 'X-Rango-Id': this.deviceId },
                        })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    RangoClient.prototype.status = function (statusRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, httpService_1.httpService.get("/basic/status?apiKey=".concat(this.apiKey), {
                            params: statusRequest,
                            headers: { 'X-Rango-Id': this.deviceId },
                        })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    RangoClient.prototype.swap = function (swapRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var body, axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = __assign(__assign({}, swapRequest), { from: (0, types_1.assetToString)(swapRequest.from), to: (0, types_1.assetToString)(swapRequest.to), swappers: !!swapRequest.swappers && swapRequest.swappers.length > 0
                                ? swapRequest.swappers.join(',')
                                : undefined, messagingProtocols: !!swapRequest.messagingProtocols &&
                                swapRequest.messagingProtocols.length > 0
                                ? swapRequest.messagingProtocols.join(',')
                                : undefined });
                        return [4 /*yield*/, httpService_1.httpService.get("/basic/swap?apiKey=".concat(this.apiKey), {
                                params: body,
                                headers: { 'X-Rango-Id': this.deviceId },
                            })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    RangoClient.prototype.reportFailure = function (requestBody) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, httpService_1.httpService.post("/basic/report-tx?apiKey=".concat(this.apiKey), requestBody, {
                            headers: { 'X-Rango-Id': this.deviceId },
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RangoClient.prototype.balance = function (walletAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, httpService_1.httpService.get("/basic/balance?apiKey=".concat(this.apiKey), {
                            params: walletAddress,
                            headers: { 'X-Rango-Id': this.deviceId },
                        })];
                    case 1:
                        axiosResponse = _a.sent();
                        return [2 /*return*/, axiosResponse.data];
                }
            });
        });
    };
    return RangoClient;
}());
exports.RangoClient = RangoClient;
//# sourceMappingURL=client.js.map